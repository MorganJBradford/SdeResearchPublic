// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SdeResearchApi.Entities.Data;

#nullable disable

namespace SdeResearchApi.Migrations
{
    [DbContext(typeof(SdeResearchDbContext))]
    [Migration("20230621170135_TopicCategory")]
    partial class TopicCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SdeResearchApi.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArticleId"));

                    b.Property<byte[]>("ArticleData")
                        .HasColumnType("bytea");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ArticleId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("SdeResearchApi.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "sde"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "supporting"
                        });
                });

            modelBuilder.Entity("SdeResearchApi.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("SdeResearchApi.Models.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserReferenceId")
                        .HasColumnType("uuid");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SdeResearchApi.Models.Researcher", b =>
                {
                    b.Property<int>("ResearcherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResearcherId"));

                    b.Property<string>("AreaOfFocus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasAdminApprovedProfile")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ResearcherId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Researchers");
                });

            modelBuilder.Entity("SdeResearchApi.Models.ResearcherArticle", b =>
                {
                    b.Property<int>("ResearcherArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResearcherArticleId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<int>("ResearcherId")
                        .HasColumnType("integer");

                    b.HasKey("ResearcherArticleId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ResearcherId");

                    b.ToTable("ResearcherArticles");
                });

            modelBuilder.Entity("SdeResearchApi.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("8918a354-e7d1-413e-aced-88b0d7908d71"),
                            Type = "User"
                        },
                        new
                        {
                            RoleId = new Guid("4165f205-05cc-4a38-bc3f-88109035a39b"),
                            Type = "Admin"
                        });
                });

            modelBuilder.Entity("SdeResearchApi.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TopicId"));

                    b.Property<bool>("IsTopicPagePublished")
                        .HasColumnType("boolean");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("SdeResearchApi.Models.TopicCategory", b =>
                {
                    b.Property<int>("TopicCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TopicCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("TopicCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicCategories");
                });

            modelBuilder.Entity("SdeResearchApi.Models.TopicDetails", b =>
                {
                    b.Property<int>("TopicDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TopicDetailsId"));

                    b.Property<int>("ResearcherId")
                        .HasColumnType("integer");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("TopicDetailsId");

                    b.HasIndex("ResearcherId");

                    b.HasIndex("TopicId")
                        .IsUnique();

                    b.ToTable("TopicDetails");
                });

            modelBuilder.Entity("SdeResearchApi.Models.TopicSection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SectionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SectionBody")
                        .HasColumnType("text");

                    b.Property<string>("SectionTitle")
                        .HasColumnType("text");

                    b.Property<int>("TopicDetailsId")
                        .HasColumnType("integer");

                    b.HasKey("SectionId");

                    b.HasIndex("TopicDetailsId");

                    b.ToTable("TopicSections");
                });

            modelBuilder.Entity("SdeResearchApi.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SdeResearchApi.Models.UserRole", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SdeResearchApi.Models.RefreshToken", b =>
                {
                    b.HasOne("SdeResearchApi.Models.User", null)
                        .WithOne("RefreshToken")
                        .HasForeignKey("SdeResearchApi.Models.RefreshToken", "UserId");
                });

            modelBuilder.Entity("SdeResearchApi.Models.Researcher", b =>
                {
                    b.HasOne("SdeResearchApi.Models.User", "User")
                        .WithOne("Researcher")
                        .HasForeignKey("SdeResearchApi.Models.Researcher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SdeResearchApi.Models.ResearcherArticle", b =>
                {
                    b.HasOne("SdeResearchApi.Models.Article", "Article")
                        .WithMany("ResearcherArticel")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdeResearchApi.Models.Researcher", "Researcher")
                        .WithMany("ResearcherArticle")
                        .HasForeignKey("ResearcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Researcher");
                });

            modelBuilder.Entity("SdeResearchApi.Models.TopicCategory", b =>
                {
                    b.HasOne("SdeResearchApi.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdeResearchApi.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SdeResearchApi.Models.TopicDetails", b =>
                {
                    b.HasOne("SdeResearchApi.Models.Researcher", "Researcher")
                        .WithMany("TopicDetails")
                        .HasForeignKey("ResearcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdeResearchApi.Models.Topic", "Topic")
                        .WithOne("Details")
                        .HasForeignKey("SdeResearchApi.Models.TopicDetails", "TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Researcher");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SdeResearchApi.Models.TopicSection", b =>
                {
                    b.HasOne("SdeResearchApi.Models.TopicDetails", "TopicDetails")
                        .WithMany("Sections")
                        .HasForeignKey("TopicDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TopicDetails");
                });

            modelBuilder.Entity("SdeResearchApi.Models.UserRole", b =>
                {
                    b.HasOne("SdeResearchApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SdeResearchApi.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SdeResearchApi.Models.Article", b =>
                {
                    b.Navigation("ResearcherArticel");
                });

            modelBuilder.Entity("SdeResearchApi.Models.Researcher", b =>
                {
                    b.Navigation("ResearcherArticle");

                    b.Navigation("TopicDetails");
                });

            modelBuilder.Entity("SdeResearchApi.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SdeResearchApi.Models.Topic", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("SdeResearchApi.Models.TopicDetails", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("SdeResearchApi.Models.User", b =>
                {
                    b.Navigation("RefreshToken");

                    b.Navigation("Researcher");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
